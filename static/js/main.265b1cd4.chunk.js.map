{"version":3,"sources":["Components/ToDo/index.js","Components/List/index.js","pages/Dashboard/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["ToDo","item","handleRemove","useState","check","setCheck","useEffect","document","getElementById","id","checked","onClick","type","name","title","removeToDo","JSON","parse","localStorage","getItem","filter","toDo","setItem","stringify","size","color","tags","map","tag","key","List","items","toDoList","Dashboard","setToDoList","setItems","setToDo","setTags","search","setSearch","findTodos","onSubmit","e","preventDefault","lastTodo","length","split","placeholder","value","onChange","target","filterTags","Routes","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.265b1cd4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { MdClose } from 'react-icons/md'\n\nimport './styles.css';\n\nexport default function ToDo ({ item, handleRemove }) {\n  const [check, setCheck] = useState(false);\n\n  useEffect(() => {\n    let checkBox = document.getElementById(item.id);\n\n    checkBox.checked = check;\n  }, [check, item]);\n\n  function handleDelete () {\n    const toDoList = JSON.parse(localStorage.getItem('@Commit/ToDo'));\n\n    let removeToDo = toDoList.filter(toDo => toDo.id !== item.id);\n\n    localStorage.setItem('@Commit/ToDo', JSON.stringify(removeToDo));\n\n    handleRemove(removeToDo);\n  }\n\n  return (\n    <div id=\"ToDoWrapper\" onClick={() => setCheck(!check)}>\n      <div id=\"ToDoDescription\">\n        <div id=\"ContentToDo\">\n          <input type=\"checkbox\" id={item.id} name=\"toDo\" />\n          {check ? (\n            <p id=\"NoChecked\">{item.title}</p>\n          ) :\n            (\n              <p id=\"Checked\">{item.title}</p>\n            )}\n        </div>\n\n        <button onClick={handleDelete}>\n          <MdClose size={15} color=\"#fff\" />\n        </button>\n      </div>\n\n\n      <div id=\"TagDescription\">\n        {item.tags.map(tag => (\n          <span key={tag}>{tag}</span>\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport ToDo from '../ToDo';\n\nimport './styles.css';\n\nexport default function List ({ items, handleRemove }) {\n  return (\n    <div id=\"List\">\n      {items.map(item => (\n        <ToDo key={item.id} item={item} handleRemove={(toDoList) => handleRemove(toDoList)} />\n      ))}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { FaPlus, FaSearch } from \"react-icons/fa\";\n\nimport List from \"../../Components/List\";\n\nimport \"./styles.css\";\n\nexport default function Dashboard () {\n  const [toDoList, setToDoList] = useState([]);\n  const [items, setItems] = useState([]);\n  const [toDo, setToDo] = useState(\"\");\n  const [tags, setTags] = useState(\"\");\n  const [search, setSearch] = useState(\"\");\n\n  useEffect(() => {\n    const findTodos = localStorage.getItem('@Commit/ToDo');\n\n    if (findTodos) {\n      setToDoList(JSON.parse(findTodos));\n    }\n  }, []);\n\n  useEffect(() => {\n    setItems(toDoList);\n    localStorage.setItem('@Commit/ToDo', JSON.stringify(toDoList));\n  }, [toDoList]);\n\n  function handleSubmitToDo (e) {\n    e.preventDefault();\n    let id = 0;\n\n    const lastTodo = toDoList[toDoList.length - 1];\n\n    if (lastTodo) {\n      id = lastTodo.id + 1;\n    }\n\n    setToDoList([...toDoList, {\n      id,\n      title: toDo,\n      tags: tags.split(\" \")\n    }]);\n\n    setToDo('');\n    setTags('');\n  }\n\n  function handleSearch (e) {\n    e.preventDefault();\n\n    if (search === \"\") {\n      setItems(toDoList);\n    } else {\n      const filterTags = toDoList.filter(toDo => {\n        const findTag = toDo.tags.filter(tag => tag === search);\n\n        return findTag.length !== 0;\n      })\n\n      setItems(filterTags);\n      setSearch('');\n    }\n  }\n\n  return (\n    <div id=\"container\">\n      <h1>To-Do List</h1>\n      <form id=\"Submit\" onSubmit={handleSubmitToDo}>\n        <input\n          type=\"text\"\n          placeholder=\"Digite uma nova to-do\"\n          value={toDo}\n          onChange={(e) => setToDo(e.target.value)}\n        />\n\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"Adicione tags para to-do\"\n            value={tags}\n            onChange={(e) => setTags(e.target.value)}\n          />\n          <button type=\"submit\">\n            <FaPlus size={15} color=\"#fff\" />\n          </button>\n        </div>\n      </form>\n\n      <form id=\"Search\" onSubmit={handleSearch}>\n        <input\n          type=\"text\"\n          placeholder=\"Procure um to-do por tag\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n        />\n        <button type=\"submit\">\n          <FaSearch size={15} color=\"#fff\" />\n        </button>\n      </form>\n\n      <List items={items} handleRemove={(toDoList) => setToDoList(toDoList)} />\n    </div>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport Dashboard from './pages/Dashboard';\n\nexport default function Routes () {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={Dashboard} />\n      </Switch>\n    </BrowserRouter>\n  )\n}\n","import React from 'react';\n\nimport Routes from \"./routes\";\n\nimport './global.css';\n\nfunction App () {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from './App';\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}